

Returning Strings
function greet(name) {
  return `Hello, ${name} how are you doing today?`;
}

Sentence Smash
function smash(words) {
  return words.join(' ');
}

Duplicate Encoder

function duplicateEncode(word) {
    // Convert word to lowercase to handle case-insensitive comparison
    word = word.toLowerCase();
    
    // Create an object to count occurrences of each character
    let counts = {};
    
    // Count occurrences of each character
    for (let char of word) {
        counts[char] = (counts[char] || 0) + 1;
    }
    
    // Map each character to '(' if it appears once, or ')' if it appears multiple times
    return word.split('').map(char => 
        counts[char] === 1 ? '(' : ')'
    ).join('');
}

Sum Strings as Numbers

function sumStrings(a,b) { 
  let nber1 = BigInt(a);
  let nber2 = BigInt(b);
  
  return (nber1 + nber2).toString();

}

Counting Duplicates

function duplicateCount(text){
  //...
  let count = 0;
  let textArr = text.toLowerCase().split('');
  let charCount = {};
  textArr.forEach((char) => {
    charCount[char] = charCount[char] + 1 || 1;
  });
  for (let char in charCount) {
    if (charCount[char] > 1) {
      count++;
    }
  }
  return count;
}

Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer

function findSenior(list) {
  // thank you for checking out the Coding Meetup kata :)
  
  return list.filter((dev) => dev.age === Math.max(...list.map((dev) => dev.age)));
}

Currying functions: multiply all elements in an array

function solution(str, ending){
 
  return str.endsWith(ending);
}

Currying functions: multiply all elements in an array

function multiplyAll(arr) {
  function multiply(nber) {
    let arr2 = arr.map((element) => element * nber );
    return arr2;
  }
  
  return multiply;
  
}





Break camelCase

function solution(string) {
  return string.replace(/([A-Z])/g, " $1");
}


Sum of Odd Cubed Numbers

function cubeOdd(arr) {

// insert code here >.<
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    if (typeof(arr[i]) !== "number") {
      return undefined;
    } else if (arr[i] % 2 !== 0) {
      sum += Math.pow(arr[i], 3);
    }
  
  }


return sum;
}


How many consecutive numbers are needed?

function consecutive(array) {
//code me
  let arr1 = [];
  let arr2 = array.sort((a,b) => a-b);
  let nber1 = arr2[0];
  let nber2 = arr2[arr2.length - 1];
  let count=0;
  for(let i = nber1; i <= nber2; i++) {
      if(!arr2.includes(i)){
          arr1.push(i)
          count++;
      }
      
  }
  return count;
}


Reverse words

function reverseWords(str) {
  // Go for it
  let str1 = str.split(' ');
  let str2 = str1.map((element) => element.split('').reverse().join(''));
  let str3 = str2.join(' ');
  return str3;
}



Coding Meetup #2 - Higher-Order Functions Series - Greet developers

function greetDevelopers(list) {
  // thank you for checking out my kata :)
  list.map((element => element.greeting = "Hi " + element.firstName + ", what do you like the most about " + element.language + "?"));
  return list;
}



Balanced Number (Special Numbers Series #1 )

function balancedNum(number) {
 let nber1 = number.toString();
  let nber2 = nber1.split('').map(Number);
  let length = nber2.length;
  let sum1 = 0;
  let sum2 = 0;
   if (length <= 2) return 'Balanced';
  let middleStart,middleEnd;
  if (length % 2 === 0){
       middleStart = length / 2 - 1;
       middleEnd = length / 2;
  } else {
      middleStart = Math.floor(length / 2);
      middleEnd = Math.floor(length / 2);
  }
  
  for (let i = 0; i < middleStart; i++) {
    sum1 += nber2[i];
  }
  for (let j = middleEnd + 1; j < length; j++) {
    sum2 += nber2[j];
  }
  // Compare and return result
  return sum1 === sum2 ? "Balanced" : "Not Balanced";
}


Array.diff
function arrayDiff(a, b) {
  
  return a.filter(x => !b.includes(x));
  
}


Flatten

var flatten = function (array){
  // TODO: Program me
  let arr1 = array.flat(1);
  return arr1;
}


Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe

function countDevelopers(list) {
  // your awesome code here :)
  let devEur = 0;
  for (let i = 0; i < list.length; i++) {
      if (list[i].hasOwnProperty('continent')) {
          if(list[i].continent === 'Europe' && list[i].language === 'JavaScript') {
              devEur += 1;
          }
      } else {
          devEur += 0;
      }
  }
  return devEur;
  
}


Is there a vowel in there?

function isVow(a) {
  let b = [];
  for(let i = 0; i < a.length; i++) {
    if(String.fromCharCode(a[i]) === 'a' || String.fromCharCode(a[i]) === 'i' || String.fromCharCode(a[i]) === 'o' || String.fromCharCode(a[i]) === "u" || String.fromCharCode(a[i]) === "e") {
      b.push(String.fromCharCode(a[i]));
    } else {
      b.push(a[i]);
    }
    
  };
  return b;
}


Sum Of Cubes

function sumCubes(n){
  // ...
  
  let answ = 0;
  for(let nber = 1;nber <= n; nber++) {
    answ += Math.pow(nber, 3);
  }
  return answ;
}


Find the Capital 

var capitals = function (word) {
	// Write your code here
  let word1 = word.split('');
  let word2 = [];
  for (let i = 0; i < word1.length; i++) {
    if (word1[i] === word1[i].toUpperCase()) {
        word2.push(i);
    }
  }
  
  return word2;
  
};


The highest profit wins!

function minMax(arr){
  return [Math.min(...arr), Math.max(...arr)]; // fix me!
}


Keep Hydrated!

function litres(time) {
  let litres = 0.5;
  let litreperTime = litres * time;
  
  return Math.floor(litreperTime);
}

console.log(litres(5));


Sum Mixed Array
function sumMix(x){
  let arr = x.reduce((acc,curr) => acc + Number(curr), 0);
  return arr;

}


Odd or Even?
function oddOrEven(array) {
    let sum = array.reduce((acc,curr) => acc + curr, 0);
    if (sum % 2 === 0) {
      return "even";
  } else {
      return "odd";
  }
    
}


Find the smallest integer in the array
function findSmallestInt(arr) {
  //your code here
  let arr1 = arr.sort((a,b) => a-b);
  return arr1[0];
}


Ones and Zeros
const binaryArrayToNumber = arr => {
  return arr.reduce((acc, bit, index) => {
    const power = arr.length - 1 - index;
    return acc + bit * Math.pow(2, power);
  }, 0);
};


Disemvowel Trolls
function disemvowel(str) {
  // Regular expression to match vowels (case-insensitive)
  const vowels = /[aeiouAEIOU]/g;
  // Replace all vowels with an empty string
  return str.replace(vowels, "");
}


Vowel Count
function getCount(str) {
  const vowelsCount = str.match(/[aeiou]/gi)?.length || 0;
  return vowelsCount;
}


Gravity Flip
const flip=(d, a)=>{
  //TODO
  if (d === "R") {
    a.sort((a,b) => a-b);
  } else {
    a.sort((a,b) => b-a);
  }
  return a; 
}




